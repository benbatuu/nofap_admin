// OpenAI import sadece server-side i√ßin - dynamic import kullan
let OpenAI: any = null

interface User {
    id: string
    name?: string
    email: string
    streak?: number
    isPremium?: boolean
    lastActivity?: Date
    preferences?: any
    language?: string
    timezone?: string
    age?: number
    plan?: 'free' | 'premium' | 'pro'
    goals?: string[]
    completedTasks?: number
    failedTasks?: number
    averageTaskDuration?: number
    preferredCategories?: string[]
    avoidedCategories?: string[]
    bestTimeOfDay?: string
    worstTimeOfDay?: string
    motivationLevel?: 'low' | 'medium' | 'high'
    stressLevel?: 'low' | 'medium' | 'high'
    socialSupport?: 'none' | 'low' | 'medium' | 'high'
}

interface SlipData {
    id: string
    reason?: string
    triggers?: string[]
    mood?: string
    location?: string
    timeOfDay?: string
    duration?: number
    intensity?: number
    thoughts?: string
    emotions?: string[]
    physicalSensations?: string[]
    environmentalFactors?: string[]
    socialContext?: string
    previousActions?: string[]
    cravingLevel?: number
    stressLevel?: number
    sleepQuality?: number
    energyLevel?: number
    createdAt: Date
}

interface UserPlan {
    id: string
    type: 'free' | 'premium' | 'pro'
    features: string[]
    dailyTaskLimit?: number
    aiGenerationLimit?: number
    customCategories?: boolean
    advancedAnalytics?: boolean
    personalCoaching?: boolean
}

interface ExistingTaskContext {
    category: string
    difficulty: string
    previousTitle: string
    previousDescription: string
    completionRate?: number
    userFeedback?: string
    timeSpent?: number
}

interface GenerateTasksParams {
    user: User
    userPlan?: UserPlan
    slipData?: SlipData | null
    recentSlips?: SlipData[]
    taskType: 'single' | 'bulk' | 'personalized' | 'regenerate'
    count?: number
    existingTask?: ExistingTaskContext
    recentTasks?: any[]
    completedTasks?: any[]
    failedTasks?: any[]
    userGoals?: string[]
    currentMood?: string
    currentStressLevel?: number
    currentEnergyLevel?: number
    timeOfDay?: string
    dayOfWeek?: string
    season?: string
    weather?: string
    socialContext?: string
}

interface GeneratedTask {
    title: string
    description: string
    category: string
    difficulty: 'easy' | 'medium' | 'hard'
    dueDate: Date
    aiConfidence: number
    estimatedDuration?: number
    tags?: string[]
    motivationalMessage?: string
    tips?: string[]
    expectedBenefits?: string[]
    potentialChallenges?: string[]
    successMetrics?: string[]
    relatedResources?: string[]
}

// OpenAI client initialization - sadece server-side'da
let openai: any = null

async function getOpenAIClient() {
    if (typeof window !== 'undefined') {
        throw new Error('OpenAI client can only be used on server-side')
    }

    if (!openai) {
        if (!process.env.OPENAI_API_KEY) {
            throw new Error('OPENAI_API_KEY environment variable is not set')
        }

        // Dynamic import to avoid client-side loading
        if (!OpenAI) {
            const openaiModule = await import('openai')
            OpenAI = openaiModule.default
        }

        openai = new OpenAI({
            apiKey: process.env.OPENAI_API_KEY,
        })
    }

    return openai
}

export class AITaskGenerator {
    // Available task categories
    private static readonly CATEGORIES = [
        'Mindfulness', 'Physical', 'Mental', 'Social', 'Digital',
        'Productivity', 'Health', 'Learning', 'Creative', 'Spiritual'
    ]

    // Language mappings for multilingual support
    private static readonly LANGUAGE_PROMPTS = {
        'tr': {
            systemPrompt: 'Sen NoFap uygulamasƒ± i√ßin ki≈üiselle≈ütirilmi≈ü g√∂revler olu≈üturan bir AI asistanƒ±sƒ±n. Kullanƒ±cƒ±nƒ±n verilerine g√∂re etkili, motivasyonel ve ger√ßek√ßi g√∂revler olu≈ütur.',
            categories: {
                'Mindfulness': 'Zihinsel farkƒ±ndalƒ±k ve meditasyon',
                'Physical': 'Fiziksel aktivite ve egzersiz',
                'Mental': 'Zihinsel g√º√ßlendirme ve √∂z-disiplin',
                'Social': 'Sosyal baƒülantƒ± ve ili≈ükiler',
                'Digital': 'Dijital detoks ve teknoloji y√∂netimi',
                'Productivity': 'Verimlilik ve zaman y√∂netimi',
                'Health': 'Saƒülƒ±k ve beslenme',
                'Learning': '√ñƒürenme ve ki≈üisel geli≈üim',
                'Creative': 'Yaratƒ±cƒ±lƒ±k ve sanat',
                'Spiritual': 'Manevi geli≈üim ve i√ß huzur'
            }
        },
        'en': {
            systemPrompt: 'You are an AI assistant that creates personalized tasks for a NoFap application. Create effective, motivational, and realistic tasks based on user data.',
            categories: {
                'Mindfulness': 'Mental awareness and meditation',
                'Physical': 'Physical activity and exercise',
                'Mental': 'Mental strengthening and self-discipline',
                'Social': 'Social connection and relationships',
                'Digital': 'Digital detox and technology management',
                'Productivity': 'Productivity and time management',
                'Health': 'Health and nutrition',
                'Learning': 'Learning and personal development',
                'Creative': 'Creativity and arts',
                'Spiritual': 'Spiritual development and inner peace'
            }
        }
    }

    static async generateTasks(params: GenerateTasksParams): Promise<GeneratedTask[]> {
        // Server-side kontrol√º
        if (typeof window !== 'undefined') {
            throw new Error('AI task generation can only be called from server-side')
        }

        try {
            console.log('ü§ñ AI Task Generation Started:', { userId: params.user.id, taskType: params.taskType })

            const client = await getOpenAIClient()
            if (!client) {
                throw new Error('OpenAI client is not available')
            }

            const { user, slipData, taskType, count = 1, existingTask } = params
            const userLanguage = user.language || 'tr'
            const languageConfig = this.LANGUAGE_PROMPTS[userLanguage] || this.LANGUAGE_PROMPTS['tr']

            // Build comprehensive user context
            const userContext = this.buildUserContext(params)

            // Generate AI prompt
            const prompt = this.buildPrompt(userContext, taskType, count, languageConfig, existingTask)

            console.log('üìù Generated Prompt Length:', prompt.length)
            console.log('üéØ User Context Summary:', {
                streak: user.streak,
                hasSlipData: !!slipData,
                taskType,
                count
            })

            // Call OpenAI API
            console.log('üöÄ Calling OpenAI API...')
            const completion = await client.chat.completions.create({
                model: "gpt-4-turbo-preview",
                messages: [
                    {
                        role: "system",
                        content: languageConfig.systemPrompt + " Her seferinde farklƒ± ve yaratƒ±cƒ± g√∂revler olu≈ütur. Tekrar etme!"
                    },
                    {
                        role: "user",
                        content: prompt
                    }
                ],
                temperature: 1.2, // Maximum creativity
                max_tokens: 2000,
                response_format: { type: "json_object" },
                seed: Math.floor(Math.random() * 1000000) // Random seed for variety
            })

            console.log('‚úÖ OpenAI API Response received')
            console.log('üìä Usage:', completion.usage)

            const response = completion.choices[0]?.message?.content
            if (!response) {
                throw new Error('No response from OpenAI')
            }

            console.log('üìÑ Raw Response Length:', response.length)
            console.log('üìÑ Raw Response Preview:', response.substring(0, 200) + '...')

            // Parse and validate response
            const parsedTasks = JSON.parse(response)
            console.log('üéØ Parsed Tasks Count:', parsedTasks.tasks?.length || 0)

            const tasks = this.validateAndFormatTasks(parsedTasks, user)

            console.log('‚ú® AI Task Generation Successful:', tasks.map(t => ({ title: t.title, category: t.category, confidence: t.aiConfidence })))

            return tasks
        } catch (error) {
            console.error('‚ùå AI Task Generation Error:', error)
            console.log('üîÑ Falling back to template-based generation')

            // Fallback to template-based generation if AI fails
            return this.generateFallbackTasks(params)
        }
    }

    private static buildUserContext(params: GenerateTasksParams): string {
        const { user, slipData, recentSlips, recentTasks, completedTasks, failedTasks } = params

        let context = `Kullanƒ±cƒ± Profili:
- ID: ${user.id}
- ƒ∞sim: ${user.name || 'Bilinmiyor'}
- Streak: ${user.streak || 0} g√ºn
- Plan: ${user.plan || (user.isPremium ? 'premium' : 'free')}
- Dil: ${user.language || 'tr'}
- Ya≈ü: ${user.age || 'Belirtilmemi≈ü'}
- Motivasyon Seviyesi: ${user.motivationLevel || 'orta'}
- Stres Seviyesi: ${user.stressLevel || 'orta'}
- Sosyal Destek: ${user.socialSupport || 'orta'}
`

        if (user.goals && user.goals.length > 0) {
            context += `- Hedefler: ${user.goals.join(', ')}\n`
        }

        if (user.preferredCategories && user.preferredCategories.length > 0) {
            context += `- Tercih Edilen Kategoriler: ${user.preferredCategories.join(', ')}\n`
        }

        if (user.avoidedCategories && user.avoidedCategories.length > 0) {
            context += `- Ka√ßƒ±nƒ±lan Kategoriler: ${user.avoidedCategories.join(', ')}\n`
        }

        // Add performance statistics
        if (user.completedTasks || user.failedTasks) {
            const totalTasks = (user.completedTasks || 0) + (user.failedTasks || 0)
            const successRate = totalTasks > 0 ? ((user.completedTasks || 0) / totalTasks * 100).toFixed(1) : '0'
            context += `- G√∂rev Ba≈üarƒ± Oranƒ±: %${successRate} (${user.completedTasks || 0}/${totalTasks})\n`
        }

        if (user.averageTaskDuration) {
            context += `- Ortalama G√∂rev S√ºresi: ${user.averageTaskDuration} dakika\n`
        }

        // Add slip information if available
        if (slipData) {
            const daysSinceSlip = Math.floor((Date.now() - new Date(slipData.createdAt).getTime()) / (1000 * 60 * 60 * 24))
            context += `\nSon Slip Bilgisi (${daysSinceSlip} g√ºn √∂nce):
- Sebep: ${slipData.reason || 'Belirtilmemi≈ü'}
- Tetikleyiciler: ${slipData.triggers?.join(', ') || 'Belirtilmemi≈ü'}
- Ruh Hali: ${slipData.mood || 'Belirtilmemi≈ü'}
- Zaman: ${slipData.timeOfDay || 'Belirtilmemi≈ü'}
- Lokasyon: ${slipData.location || 'Belirtilmemi≈ü'}
- Yoƒüunluk: ${slipData.intensity || 'Belirtilmemi≈ü'}/10
- D√º≈ü√ºnceler: ${slipData.thoughts || 'Belirtilmemi≈ü'}
- Duygular: ${slipData.emotions?.join(', ') || 'Belirtilmemi≈ü'}
`

            if (slipData.stressLevel) {
                context += `- Stres Seviyesi: ${slipData.stressLevel}/10\n`
            }
            if (slipData.energyLevel) {
                context += `- Enerji Seviyesi: ${slipData.energyLevel}/10\n`
            }
            if (slipData.sleepQuality) {
                context += `- Uyku Kalitesi: ${slipData.sleepQuality}/10\n`
            }
        }

        // Add recent slips pattern analysis
        if (recentSlips && recentSlips.length > 0) {
            const commonTriggers = this.analyzeCommonTriggers(recentSlips)
            const commonTimes = this.analyzeCommonTimes(recentSlips)

            context += `\nSon Slip Kalƒ±plarƒ±:
- Yaygƒ±n Tetikleyiciler: ${commonTriggers.join(', ')}
- Yaygƒ±n Zamanlar: ${commonTimes.join(', ')}
`
        }

        // Add recent task performance
        if (recentTasks && recentTasks.length > 0) {
            const recentCategories = recentTasks.map(t => t.category).slice(0, 5)
            context += `\nSon G√∂revler: ${recentCategories.join(', ')}\n`
        }

        if (completedTasks && completedTasks.length > 0) {
            const successfulCategories = completedTasks.map(t => t.category).slice(0, 5)
            context += `Son Ba≈üarƒ±lƒ± G√∂revler: ${successfulCategories.join(', ')}\n`
        }

        if (failedTasks && failedTasks.length > 0) {
            const failedCategories = failedTasks.map(t => t.category).slice(0, 5)
            context += `Son Ba≈üarƒ±sƒ±z G√∂revler: ${failedCategories.join(', ')}\n`
        }

        // Add current context
        const now = new Date()
        const timeOfDay = this.getTimeOfDay(now)
        const dayOfWeek = now.toLocaleDateString('tr-TR', { weekday: 'long' })
        const season = this.getSeason(now)

        context += `\nMevcut Durum:
- Zaman Dilimi: ${timeOfDay}
- G√ºn: ${dayOfWeek}
- Mevsim: ${season}
`

        return context
    }

    private static buildPrompt(
        userContext: string,
        taskType: string,
        count: number,
        languageConfig: any,
        existingTask?: ExistingTaskContext
    ): string {
        let prompt = `${userContext}

G√∂rev T√ºr√º: ${taskType}
ƒ∞stenen G√∂rev Sayƒ±sƒ±: ${count}

Mevcut Kategoriler: ${this.CATEGORIES.join(', ')}

`

        if (existingTask) {
            prompt += `YENIDEN OLU≈ûTURMA MODU:
Eski G√∂rev:
- Kategori: ${existingTask.category}
- Ba≈ülƒ±k: ${existingTask.previousTitle}
- A√ßƒ±klama: ${existingTask.previousDescription}
- Tamamlanma Oranƒ±: ${existingTask.completionRate || 'Bilinmiyor'}%

√ñNEMLI: Bu g√∂revden TAMAMEN FARKLI bir g√∂rev olu≈ütur!
- Farklƒ± kategori tercih et (m√ºmk√ºnse)
- Farklƒ± aktivite t√ºr√º se√ß
- Farklƒ± zorluk seviyesi dene
- Tamamen yeni bir ba≈ülƒ±k kullan
- √ñnceki g√∂revle hi√ßbir benzerlik olmasƒ±n

`
        }

        prompt += `√ñNEMLI: Her seferinde FARKLI ve √áE≈ûƒ∞TLƒ∞ g√∂revler olu≈ütur. Aynƒ± g√∂revleri tekrarlama!

L√ºtfen yukarƒ±daki kullanƒ±cƒ± verilerine g√∂re ${count} adet TAMAMEN FARKLI ve ki≈üiselle≈ütirilmi≈ü g√∂rev olu≈ütur. 

G√ñREV √áE≈ûƒ∞TLƒ∞Lƒ∞ƒûƒ∞ KURALLARI:
- Her g√∂rev farklƒ± bir kategoriden olmalƒ±
- Aynƒ± ba≈ülƒ±klarƒ± kullanma
- Yaratƒ±cƒ± ve √∂zg√ºn g√∂revler olu≈ütur
- Kullanƒ±cƒ±nƒ±n durumuna g√∂re s√ºrpriz aktiviteler ekle

Her g√∂rev ≈üunlarƒ± i√ßermeli:
1. Kullanƒ±cƒ±nƒ±n streak durumuna uygun zorluk seviyesi
2. Slip tetikleyicilerini ele alan i√ßerik (varsa)
3. Kullanƒ±cƒ±nƒ±n tercihlerine uygun kategori se√ßimi
4. Motivasyonel ve ki≈üiselle≈ütirilmi≈ü a√ßƒ±klama
5. Ger√ßek√ßi s√ºre tahmini
6. Pratik ipu√ßlarƒ±

Zorluk Seviyeleri:
- easy: 5-15 dakika, basit g√∂revler
- medium: 15-45 dakika, orta d√ºzey odaklanma
- hard: 45+ dakika, y√ºksek disiplin gerektiren

YARATICI G√ñREV √ñRNEKLERƒ∞:
- "G√ºn batƒ±mƒ±nda 15 dakikalƒ±k fotoƒüraf √ßekimi"
- "Yabancƒ± biriyle 5 dakikalƒ±k sohbet"
- "Evdeki bir e≈üyayƒ± yeniden d√ºzenle"
- "Sevdiƒüin bir ≈üarkƒ±yƒ± dans ederek dinle"
- "Bug√ºn √∂ƒürendiƒüin bir ≈üeyi birine anlat"
- "10 dakikalƒ±k soƒüuk du≈ü meditasyonu"
- "√áocukluk anƒ±larƒ±nƒ± 15 dakika yaz"

JSON formatƒ±nda yanƒ±t ver:
{
  "tasks": [
    {
      "title": "√ñzg√ºn ve yaratƒ±cƒ± g√∂rev ba≈ülƒ±ƒüƒ±",
      "description": "Detaylƒ± a√ßƒ±klama ve ki≈üiselle≈ütirilmi≈ü motivasyon",
      "category": "Kategori adƒ±",
      "difficulty": "easy/medium/hard",
      "estimatedDuration": 30,
      "aiConfidence": 85,
      "motivationalMessage": "Ki≈üiselle≈ütirilmi≈ü motivasyon mesajƒ±",
      "tips": ["ƒ∞pucu 1", "ƒ∞pucu 2"],
      "expectedBenefits": ["Fayda 1", "Fayda 2"],
      "tags": ["etiket1", "etiket2"]
    }
  ]
}

TEKRAR: Her seferinde FARKLI g√∂revler olu≈ütur! Aynƒ± g√∂revleri tekrarlama!`

        return prompt
    }

    private static validateAndFormatTasks(parsedTasks: any, user: User): GeneratedTask[] {
        if (!parsedTasks.tasks || !Array.isArray(parsedTasks.tasks)) {
            throw new Error('Invalid task format from AI')
        }

        return parsedTasks.tasks.map((task: any) => {
            // Validate required fields
            if (!task.title || !task.description || !task.category || !task.difficulty) {
                throw new Error('Missing required task fields')
            }

            // Calculate due date based on difficulty
            const daysToAdd = task.difficulty === 'easy' ? 1 :
                task.difficulty === 'medium' ? 3 : 7
            const dueDate = new Date(Date.now() + daysToAdd * 24 * 60 * 60 * 1000)

            // Ensure AI confidence is within bounds
            const aiConfidence = Math.max(50, Math.min(100, task.aiConfidence || 75))

            return {
                title: task.title,
                description: task.description,
                category: task.category,
                difficulty: task.difficulty,
                dueDate,
                aiConfidence,
                estimatedDuration: task.estimatedDuration || 30,
                tags: task.tags || [],
                motivationalMessage: task.motivationalMessage || '',
                tips: task.tips || [],
                expectedBenefits: task.expectedBenefits || [],
                potentialChallenges: task.potentialChallenges || [],
                successMetrics: task.successMetrics || [],
                relatedResources: task.relatedResources || []
            }
        })
    }

    private static generateFallbackTasks(params: GenerateTasksParams): GeneratedTask[] {
        const { user, slipData, count = 1, taskType, existingTask } = params
        const tasks: GeneratedTask[] = []

        // Expanded fallback task pool with more variety
        const fallbackTasks = [
            // Mindfulness
            {
                title: '5 Dakikalƒ±k Nefes Egzersizi',
                description: 'Derin nefes alarak zihnini sakinle≈ütir. Bu egzersiz stres seviyeni d√º≈ü√ºrmeye yardƒ±mcƒ± olacak.',
                category: 'Mindfulness',
                difficulty: 'easy' as const
            },
            {
                title: '≈û√ºk√ºr Meditasyonu',
                description: 'Bug√ºn minnettar olduƒüun 3 ≈üeyi d√º≈ü√ºn ve bu pozitif duygularƒ± hisset.',
                category: 'Mindfulness',
                difficulty: 'easy' as const
            },
            {
                title: 'Farkƒ±ndalƒ±k Y√ºr√ºy√º≈ü√º',
                description: '10 dakika yava≈ü y√ºr√ºy√º≈ü yap, √ßevrene ve hislerine odaklan.',
                category: 'Mindfulness',
                difficulty: 'easy' as const
            },

            // Physical
            {
                title: '15 Dakikalƒ±k Y√ºr√ºy√º≈ü',
                description: 'Dƒ±≈üarƒ± √ßƒ±k ve temiz hava al. Fiziksel aktivite ruh halini iyile≈ütirecek.',
                category: 'Physical',
                difficulty: 'easy' as const
            },
            {
                title: 'Basit Esneme Egzersizleri',
                description: '10 dakika boyunca v√ºcudunu esnet. Boyun, omuz ve sƒ±rt kaslarƒ±na odaklan.',
                category: 'Physical',
                difficulty: 'easy' as const
            },
            {
                title: '20 ≈ûƒ±nav Challenge',
                description: 'G√ºnde 20 ≈üƒ±nav yap. Ba≈ülangƒ±√ß i√ßin m√ºkemmel bir hedef.',
                category: 'Physical',
                difficulty: 'medium' as const
            },

            // Mental
            {
                title: 'G√ºnl√ºk Hedef Belirleme',
                description: 'Yarƒ±n i√ßin 3 k√º√ß√ºk, ula≈üƒ±labilir hedef belirle ve bunlarƒ± yaz.',
                category: 'Mental',
                difficulty: 'easy' as const
            },
            {
                title: 'Pozitif Afirmasyon',
                description: 'Aynada kendine bakarak 5 pozitif c√ºmle s√∂yle.',
                category: 'Mental',
                difficulty: 'easy' as const
            },
            {
                title: 'G√ºnl√ºk Journaling',
                description: '15 dakika boyunca d√º≈ü√ºncelerini ve duygularƒ±nƒ± yaz.',
                category: 'Mental',
                difficulty: 'medium' as const
            },

            // Social
            {
                title: 'Aile ile Kaliteli Zaman',
                description: 'Ailenle en az 30 dakika telefonsuz kaliteli zaman ge√ßir.',
                category: 'Social',
                difficulty: 'easy' as const
            },
            {
                title: 'Arkada≈üa Mesaj At',
                description: 'Uzun zamandƒ±r konu≈ümadƒ±ƒüƒ±n bir arkada≈üƒ±na mesaj at.',
                category: 'Social',
                difficulty: 'easy' as const
            },

            // Digital
            {
                title: '1 Saatlik Telefon Detox',
                description: 'Telefonunu 1 saat kapalƒ± tut ve bu s√ºreyi ba≈üka aktivitelerle ge√ßir.',
                category: 'Digital',
                difficulty: 'easy' as const
            },
            {
                title: 'Sosyal Medya Sƒ±nƒ±rlamasƒ±',
                description: 'Bug√ºn sosyal medyada maksimum 30 dakika ge√ßir.',
                category: 'Digital',
                difficulty: 'medium' as const
            },

            // Health
            {
                title: 'Su ƒ∞√ßme Takibi',
                description: 'Bug√ºn en az 8 bardak su i√ß ve miktarƒ± takip et.',
                category: 'Health',
                difficulty: 'easy' as const
            },
            {
                title: 'Saƒülƒ±klƒ± Atƒ±≈ütƒ±rmalƒ±k',
                description: 'Meyve, kuruyemi≈ü gibi saƒülƒ±klƒ± atƒ±≈ütƒ±rmalƒ±klar tercih et.',
                category: 'Health',
                difficulty: 'easy' as const
            },

            // Learning
            {
                title: '15 Dakikalƒ±k Okuma',
                description: 'Geli≈üim odaklƒ± bir kitaptan 15 dakika oku ve notlar al.',
                category: 'Learning',
                difficulty: 'easy' as const
            },
            {
                title: 'Yeni Kelime √ñƒüren',
                description: 'Bug√ºn 5 yeni kelime √∂ƒüren ve c√ºmle i√ßinde kullan.',
                category: 'Learning',
                difficulty: 'easy' as const
            },

            // Creative
            {
                title: 'Yaratƒ±cƒ± Yazma',
                description: '10 dakika boyunca √∂zg√ºrce yaz. Konu sƒ±nƒ±rƒ± yok, sadece yaz.',
                category: 'Creative',
                difficulty: 'easy' as const
            },
            {
                title: 'Basit √áizim',
                description: '√áevrende g√∂rd√ºƒü√ºn bir ≈üeyi √ßiz. M√ºkemmel olmasƒ± gerekmiyor.',
                category: 'Creative',
                difficulty: 'easy' as const
            },

            // Productivity
            {
                title: 'G√ºnl√ºk To-Do Listesi',
                description: 'Yarƒ±n i√ßin basit bir yapƒ±lacaklar listesi hazƒ±rla.',
                category: 'Productivity',
                difficulty: 'easy' as const
            },
            {
                title: '√áalƒ±≈üma Alanƒ± D√ºzenleme',
                description: 'Masanƒ± ve √ßalƒ±≈üma alanƒ±nƒ± d√ºzenle, gereksiz e≈üyalarƒ± kaldƒ±r.',
                category: 'Productivity',
                difficulty: 'easy' as const
            }
        ]

        // Filter out existing task if regenerating
        let availableTasks = fallbackTasks
        if (taskType === 'regenerate' && existingTask) {
            availableTasks = fallbackTasks.filter(task =>
                task.title !== existingTask.previousTitle &&
                !task.title.includes(existingTask.previousTitle.split(' ')[0])
            )
        }

        // Shuffle tasks for variety
        const shuffledTasks = availableTasks.sort(() => Math.random() - 0.5)

        for (let i = 0; i < count && i < shuffledTasks.length; i++) {
            const template = shuffledTasks[i]
            const dueDate = new Date(Date.now() + (template.difficulty === 'easy' ? 1 : template.difficulty === 'medium' ? 3 : 7) * 24 * 60 * 60 * 1000)

            tasks.push({
                title: template.title,
                description: `${template.description} ${user.name ? `${user.name}, ` : ''}bu g√∂rev senin i√ßin √∂zel olarak se√ßildi!`,
                category: template.category,
                difficulty: template.difficulty,
                dueDate,
                aiConfidence: Math.floor(Math.random() * 20) + 60, // 60-80 range for variety
                estimatedDuration: template.difficulty === 'easy' ? 15 : template.difficulty === 'medium' ? 30 : 45,
                tags: ['fallback', template.category.toLowerCase()],
                motivationalMessage: this.getRandomMotivationalMessage(user),
                tips: this.getRandomTips(template.category),
                expectedBenefits: this.getRandomBenefits(template.category),
                potentialChallenges: [],
                successMetrics: [],
                relatedResources: []
            })
        }

        return tasks
    }

    private static getRandomMotivationalMessage(user: User): string {
        const messages = [
            `${user.name || 'Arkada≈ü'}, k√º√ß√ºk adƒ±mlar b√ºy√ºk deƒüi≈üimler yaratƒ±r!`,
            `Sen bunu ba≈üarabilirsin ${user.name || 'dostum'}!`,
            `Her g√ºn biraz daha g√º√ßleniyorsun!`,
            `Bu g√∂rev seni bir adƒ±m daha ileriye ta≈üƒ±yacak!`,
            `Kendine olan g√ºvenin artƒ±yor, devam et!`,
            `Bug√ºn kendine yatƒ±rƒ±m yapmanƒ±n zamanƒ±!`,
            `Sen ger√ßek bir sava≈ü√ßƒ±sƒ±n, bunu kanƒ±tla!`
        ]
        return messages[Math.floor(Math.random() * messages.length)]
    }

    private static getRandomTips(category: string): string[] {
        const tipsByCategory = {
            'Mindfulness': ['Sessiz bir ortam se√ß', 'Nefesine odaklan', 'D√º≈ü√ºnceleri yargƒ±lamadan g√∂zlemle'],
            'Physical': ['Yava≈ü ba≈üla', 'V√ºcudunu dinle', 'D√ºzenli ol'],
            'Mental': ['D√ºr√ºst ol', 'K√º√ß√ºk hedefler koy', 'Kendini takdir et'],
            'Social': ['Samimi ol', 'Aktif dinle', 'Empati g√∂ster'],
            'Digital': ['Alternatif aktivite planla', 'Bildirimleri kapat', 'Zamanƒ± takip et'],
            'Health': ['K√º√ß√ºk deƒüi≈üiklikler yap', 'Tutarlƒ± ol', 'Kendini zorla'],
            'Learning': ['Notlar al', 'Pratik yap', 'Meraklƒ± ol'],
            'Creative': ['M√ºkemmeliyet√ßi olma', 'Eƒülen', 'Deneme yanƒ±lma yap'],
            'Productivity': ['√ñncelik belirle', 'Dikkat daƒüƒ±tƒ±cƒ±larƒ± kaldƒ±r', 'Mola ver']
        }

        const tips = tipsByCategory[category] || ['Sabƒ±rlƒ± ol', 'Tutarlƒ± ol', 'Kendine g√ºven']
        return tips.slice(0, 2) // Return 2 random tips
    }

    private static getRandomBenefits(category: string): string[] {
        const benefitsByCategory = {
            'Mindfulness': ['Stres azalmasƒ±', 'Mental netlik', 'Duygusal denge'],
            'Physical': ['Enerji artƒ±≈üƒ±', 'Daha iyi uyku', 'G√º√ßl√º v√ºcut'],
            'Mental': ['√ñz g√ºven artƒ±≈üƒ±', 'Mental dayanƒ±klƒ±lƒ±k', 'Hedef odaklƒ±lƒ±k'],
            'Social': ['G√º√ßl√º ili≈ükiler', 'Sosyal destek', 'Mutluluk artƒ±≈üƒ±'],
            'Digital': ['Daha fazla zaman', 'Ger√ßek baƒülantƒ±lar', 'Mental huzur'],
            'Health': ['Daha iyi saƒülƒ±k', 'Enerji artƒ±≈üƒ±', 'Ya≈üam kalitesi'],
            'Learning': ['Yeni beceriler', 'Mental stim√ºlasyon', 'Ki≈üisel geli≈üim'],
            'Creative': ['Yaratƒ±cƒ±lƒ±k artƒ±≈üƒ±', 'Stres azalmasƒ±', 'Kendini ifade'],
            'Productivity': ['Daha fazla ba≈üarƒ±', 'Zaman y√∂netimi', 'Hedeflere ula≈üma']
        }

        const benefits = benefitsByCategory[category] || ['Ki≈üisel geli≈üim', 'Motivasyon artƒ±≈üƒ±', 'Pozitif momentum']
        return benefits.slice(0, 2) // Return 2 random benefits
    }

    // Helper methods
    private static analyzeCommonTriggers(slips: SlipData[]): string[] {
        const triggerCounts: { [key: string]: number } = {}

        slips.forEach(slip => {
            slip.triggers?.forEach(trigger => {
                triggerCounts[trigger] = (triggerCounts[trigger] || 0) + 1
            })
        })

        return Object.entries(triggerCounts)
            .sort(([, a], [, b]) => b - a)
            .slice(0, 3)
            .map(([trigger]) => trigger)
    }

    private static analyzeCommonTimes(slips: SlipData[]): string[] {
        const timeCounts: { [key: string]: number } = {}

        slips.forEach(slip => {
            if (slip.timeOfDay) {
                timeCounts[slip.timeOfDay] = (timeCounts[slip.timeOfDay] || 0) + 1
            }
        })

        return Object.entries(timeCounts)
            .sort(([, a], [, b]) => b - a)
            .slice(0, 2)
            .map(([time]) => time)
    }

    private static getTimeOfDay(date: Date): string {
        const hour = date.getHours()
        if (hour < 6) return 'gece'
        if (hour < 12) return 'sabah'
        if (hour < 18) return '√∂ƒüleden sonra'
        return 'ak≈üam'
    }

    private static getSeason(date: Date): string {
        const month = date.getMonth()
        if (month >= 2 && month <= 4) return 'ilkbahar'
        if (month >= 5 && month <= 7) return 'yaz'
        if (month >= 8 && month <= 10) return 'sonbahar'
        return 'kƒ±≈ü'
    }
}